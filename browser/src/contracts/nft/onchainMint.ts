import { Data, Lucid, Tx, AddressDetails, TxHash, Constr, applyParamsToScript, MintingPolicy, SpendingValidator, fromText, toUnit, PolicyId } from "lucid-cardano"
import { CompiledNFTInstance } from "../../services/nft-script-compiler"
import * as H from "../helpers"
import {NFTMetadata, RoyaltyInfo, DatumNFTMetadata, Metadata222, MetadataEvolveDatum, toAddress, toAssets, fromAssets, fromAddress} from "./onchainTypes"

/* NFT minting policy parameterized by a wallets TxOutRef.
  NB vulcan-server must be running 
*/
const onchainNFTCbor = "59055e59055b0100003232323232323232323232323232323232323232322223232323232323232533301b3370e9000001099191919192999810191919299981199b874800800854ccc08ccdc3802240042646603c66e1cdd69814000980aa400466e3cccdc62400090041bae302900101d3020005153330233370e0089002099191991919119800801801199b8c48020dc6801001199b8c480012008001375c6054004446646464466002006004666e312008371a004004666e31200048020004dd71816001911981199b87375a605a00c603490011981199b87375a605a00a603490011981199b8f003001330233371e00804066e3c008084c084c088018c08001454ccc08ccdc38022400c26464646646464466002006004666e312008371a004004666e31200048020004dd71815801911991919119800801801199b8c48020dc6801001199b8c480012008001375c605a00844660486603801a0346604866e1cdd69817003980da40046604866e1cdd69817003180da40046604866e1cdd69817002980da40046604866e3c010084cc090cdc78010111981219b8f3337189000240106eb8c0bc01408ccdc7800801981118108039810981100318100028b0a99981199b87004480104c8c8cc8c8c88cc00400c008ccdc6240106e34008008ccdc62400090040009bae302a00222332323223300100300233371890041b8d0020023337189000240100026eb8c0b000c88cc08ccc06c030064cc08ccdc39bad302d00648008cc08ccdc39bad302d00548008cc08ccdc78020101981199b8f0020213371e0020066042604400c604000a2a66604666e1c01120061323232332323223300100300233371890041b8d0020023337189000240100026eb8c0ac00c88cc8c8c88cc00400c008ccdc6240106e34008008ccdc62400090040009bae302d00422332323223300100300233371890041b8d0020023337189000240100026eb8c0bc01488cc098cc07803c070cc098cdc39bad303000948008cc098cdc39bad303000848008cc098cdc39bad303000748008cc098cdc78030119981319b8f004024330263371e00404a6604c66e3c00c014cdc7800a4507526f79616c747900302230210073021302200630200051630260023026001375401e2930b19980d1112999811800880109980199b8000248008c0800052000001323301a22533302200116153330213375e604c603c00200c26eacc094c0780044c008c07c004004dd5980d99180e980d800980e0011bac301a001301b30190053018001153301e4915d5061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f56756c63616e2f4f6e636861696e2f4d657461646174612f4f6e636861696e4e46544d696e742e68733a3133303a332d31370016301e002301e0013754602a602c002602c00aa66602c66e1d20000021324994ccc05c004526153301901816153330163370e900100109924ca66602e0022930a9980c80c0b0a9980ca4813f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f720016301900230190013754004466e0520000012233003233007002300e30100010022300922533301100114a02a660086006601a00226004601c00246601a002004294488cdd79ba7300b002374e601600291104000643b000488104000de14000488104001f4d7000223330080020014a0464600446600400400246004466004004002460066006002ae855d1118031baa0015734aae7d241317074727946726f6d2850446174615265636f72645b5d293a206c697374206973206c6f6e676572207468616e207a65726f005738aae7955ce9"
const metadataControlEvolveCbor = ""
const ownershipMintCbor = "5902165902130100003232323232323232323232323232322223232323253330113370e90000010991919191919299980b991919299980d19b874800000854cc044cdc42400000c2a6602266e1c01520001332301922533301c00114a02a6646603c0022944c00cc07c0044c008c0800048c8cdd79ba73020012374e6040002603a603e0020082a6602266e1c019200013371000a9000180f001180c8009baa00c149858dd6180c002199807119b8800148000010008ccc0348cdc4240000020060026eacc054c8c05cc05cc05c004c058004c058c050014dd718098008a99ab9c49015e5061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f56756c63616e2f4f6e636861696e2f436f6c6c656374696f6e732f4f6e636861696e46544d696e742e68733a39313a352d31390016301500230100013754602060220026022002446660160040020062940888cccccc01002c03cdd48010009199804111929998071803800899b800010021002375a602400490001bab0011480008888cccc014cc0180100080048c888c00800cc01000448940048c010894ccc01c00448940044ccc00cc028004888c00800c4c008c02c0048894ccc01ccdd78011801800891180100189128009118019129998030008801899802180480098011805000919180111980100100091801119801001000aab9f5734aae755d0aba2230023754002aae781"

export async function evolveOnchainMetadata(  
  onchainCS: PolicyId, 
  ownerCS: PolicyId,
  tkName: string, 
  metadata: NFTMetadata,
  lucid: Lucid
): Promise<TxHash> {
  const ownAddress = await lucid.wallet.address();
  const tokenName = fromText(tkName)
  const onchainMetadataControlEvolve : SpendingValidator = 
    {type:"PlutusV2", script: applyParamsToScript(metadataControlEvolveCbor, [ownerCS])}
  const controlAddress = lucid.utils.validatorToAddress(onchainMetadataControlEvolve)

  const [referenceUtxo] = await lucid.utxosAtWithUnit(
    controlAddress,
    toUnit(onchainCS, tokenName, 100),
  );
  const oldDatum = Data.from<MetadataEvolveDatum>(referenceUtxo!.datum!, MetadataEvolveDatum)
  const evolutionInfo = {
    stage: oldDatum.extra.stage,
    stages: oldDatum.extra.stages,
    price: oldDatum.extra.price,
    recipient: oldDatum.extra.recipient,
    isPaid: false
  }
  const metadataDatum = Data.to<MetadataEvolveDatum>({
      metadata: Data.castFrom<Metadata222>(Data.fromJson(metadata), Metadata222),
      version: BigInt(1),
      extra: evolutionInfo
    }, MetadataEvolveDatum)
  const txHash = await lucid.newTx()
    .collectFrom([referenceUtxo!], Data.to(new Constr(1, [])))
    .payToContract(
      controlAddress,
      {inline: metadataDatum},
      {
        [toUnit(onchainCS, tokenName, 100)]: BigInt(1)
      },
    )
    .payToAddress(ownAddress, {[toUnit(ownerCS, fromText("Ownership"))]: BigInt(1)})
    .attachSpendingValidator(onchainMetadataControlEvolve)
    .complete() 
    .then((tx) => tx.sign().complete())
    .then((tx) => tx.submit());
    console.log("Successful Evolution: ", txHash)
    return txHash;
}
export async function mintOnchainNFT(
  tkName : string,
  metadata: NFTMetadata,
  lucid: Lucid
): Promise<TxHash> {
    const ownAddress = await lucid.wallet.address();
    const [utxo] = await lucid.wallet.getUtxos();
    const txOutId = utxo!.txHash
    const txId = new Constr(0, [txOutId])
    const txOutRefParam = new Constr(0, [txId, BigInt(utxo!.outputIndex)])
    const ownershipScript = applyParamsToScript(ownershipMintCbor, [txOutRefParam],)
    const ownershipMP : MintingPolicy = {type: "PlutusV2", script: ownershipScript}
    const ownershipCS : PolicyId = lucid.utils.mintingPolicyToId(ownershipMP);

    const onchainNFTMinting : MintingPolicy = {type:"PlutusV2", script: applyParamsToScript(onchainNFTCbor, [txOutRefParam])}
    const onchainNFTMintingCS = lucid.utils.mintingPolicyToId(onchainNFTMinting)

    const onchainMetadataControlEvolve : SpendingValidator = 
      {type:"PlutusV2", script: applyParamsToScript(metadataControlEvolveCbor, [ownershipCS])}
    const metadataControlAddress = lucid.utils.validatorToAddress(onchainMetadataControlEvolve)

    const tokenName = fromText(tkName)

    const evolutionInfo = {
      stage: BigInt(0),
      stages: BigInt(1),
      price: fromAssets({lovelace: BigInt(10_000_000)}),
      recipient: fromAddress(ownAddress),
      isPaid: false
    }
    const metadataDatum = Data.to<MetadataEvolveDatum>({
        metadata: Data.castFrom<Metadata222>(Data.fromJson(metadata), Metadata222),
        version: BigInt(1),
        extra: evolutionInfo
      }, MetadataEvolveDatum)

    const txHash = await lucid.newTx()
      .collectFrom([utxo!])
      .mintAssets({
        [toUnit(onchainNFTMintingCS, tokenName, 100)]: BigInt(1),
        [toUnit(onchainNFTMintingCS, tokenName, 222)]: BigInt(1),
        [toUnit(onchainNFTMintingCS, fromText("Royalty"), 500)]: BigInt(1),
      }, Data.to(new Constr(0, [])))
      .mintAssets({
        [toUnit(ownershipCS, fromText("Ownership"))]: BigInt(1),
      }, Data.to(new Constr(0, [])))
      .payToContract(metadataControlAddress, {inline: metadataDatum}, {[toUnit(onchainNFTMintingCS, tokenName, 100)]: BigInt(1)})
      .attachMintingPolicy(onchainNFTMinting)
      .attachMintingPolicy(ownershipMP)
      .complete()
      .then((tx) => tx.sign().complete())
      .then((tx) => tx.submit())
    return txHash;
}

export async function fundOnchainNFT(
  onchainCS: PolicyId, 
  ownerCS: PolicyId,
  tkName: string, 
  lucid: Lucid
): Promise<TxHash> {
  const ownAddress = await lucid.wallet.address();
  const tokenName = fromText(tkName)
  const onchainMetadataControlEvolve : SpendingValidator = 
    {type:"PlutusV2", script: applyParamsToScript(metadataControlEvolveCbor, [ownerCS])}
  const controlAddress = lucid.utils.validatorToAddress(onchainMetadataControlEvolve)

  const [referenceUtxo] = await lucid.utxosAtWithUnit(
    controlAddress,
    toUnit(onchainCS, tokenName, 100),
  );
  const oldDatum = Data.from<MetadataEvolveDatum>(referenceUtxo!.datum!, MetadataEvolveDatum)
  const evolutionInfo = {
    stage: oldDatum.extra.stage + BigInt(1),
    stages: oldDatum.extra.stages,
    price: oldDatum.extra.price,
    recipient: oldDatum.extra.recipient,
    isPaid: true
  }
  const metadataDatum = Data.to<MetadataEvolveDatum>({
      metadata: Data.castFrom<Metadata222>(oldDatum.metadata, Metadata222),
      version: BigInt(1),
      extra: evolutionInfo
    }, MetadataEvolveDatum)
  const txHash = await lucid.newTx()
    .collectFrom([referenceUtxo!], Data.to(new Constr(1, [])))
    .payToContract(
      controlAddress,
      {inline: metadataDatum},
      {
        [toUnit(onchainCS, tokenName, 100)]: BigInt(1)
      },
    )
    .payToAddress(toAddress(oldDatum.extra.recipient, lucid), toAssets(oldDatum.extra.price))
    .attachSpendingValidator(onchainMetadataControlEvolve)
    .complete() 
    .then((tx) => tx.sign().complete())
    .then((tx) => tx.submit());
    console.log("Successful Evolution: ", txHash)
    return txHash;
}
